// This class is generated by Hummingbird Test Framework
// Hummingbird.TestFramework, A product of Hummingbird ALM tool set
// Hummingbird.TestManager, A product of Hummingbird ALM tool set
// Copyright (c) 2014-2018 Huaxing YUAN, All rights reserved
// Template created at: 2018-09-28 00:38 by Huaxing YUAN
using Hummingbird.TestFramework.Extensibility;
using Hummingbird.TestFramework.ExtensionProject;
using Hummingbird.TestFramework.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Threading.Tasks;

namespace Hummingbird.MS.Bot
{
	public class MyHttpServiceExtension : HttpServiceExtension
	{

		public override HttpRequestMetadata[] HttpRequestServices
		{
			get
			{
				return new HttpRequestMetadata[]
				{

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("3bcc996c-c154-e5dd-58a3-b314a2e058da"),
                    ContentType = "application/json",
                    Description = "Start a new conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_NewConversation",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/api/conversations",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation_401), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation_403), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation_404), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation_409)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("084eec60-553f-8372-926f-d168fb3dcf77"),
                    ContentType = "application/json",
                    Description = "Get messages in this conversation. This method is paged with the 'watermark' parameter.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_GetMessages",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_GetMessages),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/api/conversations/{conversationId}/messages",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_GetMessages_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_GetMessages_401), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_GetMessages_403), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_GetMessages_404)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("44765ee7-68d5-7499-98a2-508e481e4b92"),
                    ContentType = "application/json",
                    Description = "Send a message",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_PostMessage",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_PostMessage),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/api/conversations/{conversationId}/messages",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Conversations",
                    
                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("a8f91bbd-055c-d7e5-21bd-42a075a2fcb9"),
                    ContentType = "application/json",
                    Description = "Upload file(s) and send as attachment(s)",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_Upload",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_Upload),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/api/conversations/{conversationId}/upload",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Conversations",
                    
                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("062c0b35-f520-9991-1440-d0840ac7dd54"),
                    ContentType = "application/json",
                    Description = "Generate a token for a new conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Tokens_Get",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_Get),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/api/tokens",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Tokens",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_Get_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_Get_401), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_Get_403), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_Get_404)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("d7f55162-c23e-65dd-935c-f57a298077db"),
                    ContentType = "application/json",
                    Description = "Renew a token for a conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Tokens_RenewToken",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_RenewToken),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/api/tokens/{conversationId}/renew",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Tokens",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_RenewToken_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_RenewToken_401), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_RenewToken_403), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_RenewToken_404)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("f3d2fa44-604f-95a3-799c-318e8c6957a5"),
                    ContentType = "application/json",
                    Description = "Generate a token for a new conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Tokens_GenerateTokenForNewConversation",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_GenerateTokenForNewConversation),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/api/tokens/conversation",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Tokens",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_GenerateTokenForNewConversation_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_GenerateTokenForNewConversation_401), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_GenerateTokenForNewConversation_403), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_GenerateTokenForNewConversation_404)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("09496d57-7249-2fa9-e4a1-e19fa2ecbfec"),
                    ContentType = "application/json",
                    Description = "",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Session_GetSessionId",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Session_GetSessionId),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/directline/session/getsessionid",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Session",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Session_GetSessionId_200),

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("b58e522e-0897-0072-1721-5eaa61c78e4b"),
                    ContentType = "application/json",
                    Description = "Start a new conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_StartConversation",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_StartConversation),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/directline/conversations",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_StartConversation_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_StartConversation_201)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("21137d95-d81c-23bb-6aaa-7e26419a8f96"),
                    ContentType = "application/json",
                    Description = "Get information about an existing conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_ReconnectToConversation",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_ReconnectToConversation),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/directline/conversations/{conversationId}",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_ReconnectToConversation_200),

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("3cb3220b-4e3b-ebbf-bd1d-dc5bc2bc4b9d"),
                    ContentType = "application/json",
                    Description = "Get activities in this conversation. This method is paged with the 'watermark' parameter.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_GetActivities",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_GetActivities),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/directline/conversations/{conversationId}/activities",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_GetActivities_200),

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("e569f0f4-97d1-6f63-d5dd-cd1b999bcaad"),
                    ContentType = "application/json",
                    Description = "Send an activity",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_PostActivity",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_PostActivity),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/directline/conversations/{conversationId}/activities",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_PostActivity_200),

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("a8f91bbd-055c-d7e5-21bd-42a075a2fcb9"),
                    ContentType = "application/json",
                    Description = "Upload file(s) and send as attachment(s)",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_Upload",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_Upload),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/directline/conversations/{conversationId}/upload",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_Upload_200),

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("e832f63f-3d5b-68bc-dbf1-5117433bc648"),
                    ContentType = "application/json",
                    Description = "Refresh a token",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Tokens_RefreshToken",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Tokens_RefreshToken),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/directline/tokens/refresh",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Tokens",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Tokens_RefreshToken_200),

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("f3d2fa44-604f-95a3-799c-318e8c6957a5"),
                    ContentType = "application/json",
                    Description = "Generate a token for a new conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Tokens_GenerateTokenForNewConversation",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Tokens_GenerateTokenForNewConversation),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/directline/tokens/generate",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Tokens",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Tokens_GenerateTokenForNewConversation_200),

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("328647bd-9f24-f614-3a90-01b86557c0a2"),
                    ContentType = "application/json",
                    Description = "GetAttachmentInfo",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Attachments_GetAttachmentInfo",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachmentInfo),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/attachments/{attachmentId}",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Attachments",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachmentInfo_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachmentInfo_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("28657e68-37e1-6e0f-316e-f0cb67d040f1"),
                    ContentType = "application/json",
                    Description = "GetAttachment",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Attachments_GetAttachment",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachment),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/attachments/{attachmentId}/views/{viewId}",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Attachments",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachment_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachment_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("350c9b3d-daa6-c6ae-0f20-28f2b745bac3"),
                    ContentType = "application/json",
                    Description = "GetConversations",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_GetConversations",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversations),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversations_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversations_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("b7180d27-c393-758d-66e8-269041315049"),
                    ContentType = "application/json",
                    Description = "CreateConversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_CreateConversation",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_CreateConversation),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_CreateConversation_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_CreateConversation_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_CreateConversation_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_CreateConversation_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("0b928c95-cee7-4f66-df06-79473741816b"),
                    ContentType = "application/json",
                    Description = "SendToConversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_SendToConversation",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendToConversation),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations/{conversationId}/activities",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendToConversation_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendToConversation_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendToConversation_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendToConversation_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("5e8c9750-f919-3009-b557-7e9abc18a034"),
                    ContentType = "application/json",
                    Description = "SendConversationHistory",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_SendConversationHistory",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendConversationHistory),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations/{conversationId}/activities/history",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendConversationHistory_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendConversationHistory_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendConversationHistory_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendConversationHistory_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.PUT,
                    Id = new Guid("76a791fc-32ae-7890-ee57-276dcaa70cce"),
                    ContentType = "application/json",
                    Description = "UpdateActivity",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_UpdateActivity",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UpdateActivity),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations/{conversationId}/activities/{activityId}",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UpdateActivity_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UpdateActivity_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UpdateActivity_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UpdateActivity_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("4f1dc9b7-4111-d57f-c68c-e35ab7588857"),
                    ContentType = "application/json",
                    Description = "ReplyToActivity",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_ReplyToActivity",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_ReplyToActivity),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations/{conversationId}/activities/{activityId}",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_ReplyToActivity_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_ReplyToActivity_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_ReplyToActivity_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_ReplyToActivity_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.DELETE,
                    Id = new Guid("d95afcee-8051-f977-9317-3cd7b84615a7"),
                    ContentType = "application/json",
                    Description = "DeleteActivity",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_DeleteActivity",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_DeleteActivity),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations/{conversationId}/activities/{activityId}",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_DeleteActivity_default),

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("2b581097-764e-9194-b870-4421e1920d24"),
                    ContentType = "application/json",
                    Description = "GetConversationMembers",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_GetConversationMembers",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversationMembers),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations/{conversationId}/members",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversationMembers_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversationMembers_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("191fcc49-7d79-1cdc-7b9b-99892a903e2d"),
                    ContentType = "application/json",
                    Description = "GetConversationPagedMembers",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_GetConversationPagedMembers",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversationPagedMembers),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations/{conversationId}/pagedmembers",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversationPagedMembers_200),

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.DELETE,
                    Id = new Guid("0bee45d9-4334-22df-5b8e-d860cb013f72"),
                    ContentType = "application/json",
                    Description = "DeleteConversationMember",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_DeleteConversationMember",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_DeleteConversationMember),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations/{conversationId}/members/{memberId}",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_DeleteConversationMember_default),

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("21ac94c9-bd4f-540a-6513-b338ea9469ec"),
                    ContentType = "application/json",
                    Description = "GetActivityMembers",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_GetActivityMembers",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetActivityMembers),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations/{conversationId}/activities/{activityId}/members",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetActivityMembers_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetActivityMembers_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("ab56d2fc-f50b-8f50-904d-785cf7b1a9cb"),
                    ContentType = "application/json",
                    Description = "UploadAttachment",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Conversations_UploadAttachment",
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UploadAttachment),
                    UriTemplate = "https://${BOTSERVER}/",
                    Path = "/v3/conversations/{conversationId}/attachments",
                    ApplicationName = "Bot Framework",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UploadAttachment_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UploadAttachment_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UploadAttachment_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UploadAttachment_default)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("42c17e0d-4470-f85f-7d1e-efbd8efa29a5"),
                    ContentType = "application/json",
                    Description = "Download alterations from runtime.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Download_Alterations",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/alterations",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Alterations",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.PUT,
                    Id = new Guid("8c13fa8a-fb0b-79b6-f8b1-963079aab0a1"),
                    ContentType = "application/json",
                    Description = "Replace alterations data.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Replace_Alterations",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/alterations",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Alterations",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations_400),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("d8d3498c-5e26-0d4e-295c-8a66fe0afe45"),
                    ContentType = "application/json",
                    Description = "Gets endpoint keys for an endpoint",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Get_Endpoint_Keys",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/endpointkeys",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "EndpointKeys",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.PATCH,
                    Id = new Guid("28a20d36-23fd-b87d-f4ff-82266ea0a656"),
                    ContentType = "application/json",
                    Description = "Re-generates an endpoint key.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Refresh_Endpoint_Keys",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/endpointkeys/{keyType}",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "EndpointKeys",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("bf565420-0349-aefa-12da-a3eef952931a"),
                    ContentType = "application/json",
                    Description = "Gets all knowledgebases for a user.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Get_Knowledgebases_for_user",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/knowledgebases",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("03ad887e-ed71-0037-2b68-264ad12e797c"),
                    ContentType = "application/json",
                    Description = "Gets details of a specific knowledgebase.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Get_Knowledgebase_Details",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/knowledgebases/{kbId}",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.DELETE,
                    Id = new Guid("7539ae78-4142-b0be-7bb6-03fcec7742d0"),
                    ContentType = "application/json",
                    Description = "Deletes the knowledgebase and all its data.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Delete_Knowledgebase",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/knowledgebases/{kbId}",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase_400),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("7c55cedd-07f8-ca25-e5a9-53d14a0b5c79"),
                    ContentType = "application/json",
                    Description = "Publishes all changes in test index of a knowledgebase to its prod index.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Publish_Knowledgebase",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/knowledgebases/{kbId}",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase_400),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.PUT,
                    Id = new Guid("d24852e9-99aa-8dba-4b14-62181f87a945"),
                    ContentType = "application/json",
                    Description = "Replace knowledgebase contents.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Replace_Knowledgebase",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/knowledgebases/{kbId}",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase_400),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.PATCH,
                    Id = new Guid("bc0eaad8-689f-8bdf-fcc8-cd5199dfd18d"),
                    ContentType = "application/json",
                    Description = "Asynchronous operation to modify a knowledgebase.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Update_Knowledgebase",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/knowledgebases/{kbId}",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_202),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.POST,
                    Id = new Guid("da50b6e8-d4dc-45d6-dda8-8e2be50dadca"),
                    ContentType = "application/json",
                    Description = "Asynchronous operation to create a new knowledgebase.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Create_Knowledgebase",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/knowledgebases/createasync",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_202),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("3380efab-7995-daa5-b2f9-6c3e296a5a35"),
                    ContentType = "application/json",
                    Description = "Download the knowledgebase.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Download_Knowledgebase",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/knowledgebases/{kbId}/{environment}/qna",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_500)},

                },

                new HttpRequestMetadata(){
                    HttpMethod = HttpMethod.GET,
                    Id = new Guid("1dc7ab80-fdac-33f6-60a5-8b10712ff6f3"),
                    ContentType = "application/json",
                    Description = "Gets details of a specific long running operation.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    OperationName = "Get_Operation_Details",
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details),
                    UriTemplate = "https://westus.api.cognitive.microsoft.com/qnamaker/v4.0",
                    Path = "/operations/{operationId}",
                    ApplicationName = "QnAMaker",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Operations",
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_500)},

                },
				};
			}
		}

		public override HttpResponseMetadata[] HttpResponseServices
		{
			get
			{
	
				return new HttpResponseMetadata[]{

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_NewConversation",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/api/conversations",
                    ContentType = "application/json",
                    Id = new Guid("955cce1b-474d-4bbd-c199-c9123c4434c8"),
                    Description = "Start a new conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation_401), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation_403), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation_404), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_NewConversation_409)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_GetMessages",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/api/conversations/{conversationId}/messages",
                    ContentType = "application/json",
                    Id = new Guid("74b357f2-d312-dc5f-1d92-232a3b418d15"),
                    Description = "Get messages in this conversation. This method is paged with the 'watermark' parameter.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_GetMessages),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_GetMessages_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_GetMessages_401), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_GetMessages_403), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_GetMessages_404)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_PostMessage",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/api/conversations/{conversationId}/messages",
                    ContentType = "application/json",
                    Id = new Guid("adf293a2-19ad-01f6-8b19-4bb47ed46e5e"),
                    Description = "Send a message",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_PostMessage),
                    
                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_Upload",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/api/conversations/{conversationId}/upload",
                    ContentType = "application/json",
                    Id = new Guid("3331d83b-fae6-b2fb-74c3-592f57c3fcd3"),
                    Description = "Upload file(s) and send as attachment(s)",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Conversations_Upload),
                    
                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Tokens",
                    OperationName = "Tokens_Get",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/api/tokens",
                    ContentType = "application/json",
                    Id = new Guid("ba49d6d7-398c-17a7-6ff0-f10cb9d68d0a"),
                    Description = "Generate a token for a new conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_Get),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_Get_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_Get_401), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_Get_403), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_Get_404)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Tokens",
                    OperationName = "Tokens_RenewToken",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/api/tokens/{conversationId}/renew",
                    ContentType = "application/json",
                    Id = new Guid("ec4aa313-b694-efb7-e1e3-33e076939a12"),
                    Description = "Renew a token for a conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_RenewToken),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_RenewToken_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_RenewToken_401), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_RenewToken_403), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_RenewToken_404)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 1.1",
                    ServiceName = "Tokens",
                    OperationName = "Tokens_GenerateTokenForNewConversation",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/api/tokens/conversation",
                    ContentType = "application/json",
                    Id = new Guid("18308917-5a5a-83e1-5c00-3da3f24b2686"),
                    Description = "Generate a token for a new conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_GenerateTokenForNewConversation),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_GenerateTokenForNewConversation_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_GenerateTokenForNewConversation_401), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_GenerateTokenForNewConversation_403), typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_11.Tokens_GenerateTokenForNewConversation_404)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Session",
                    OperationName = "Session_GetSessionId",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/directline/session/getsessionid",
                    ContentType = "application/json",
                    Id = new Guid("318ba00c-96a6-f462-902c-6d7caaaf059d"),
                    Description = "",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Session_GetSessionId),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Session_GetSessionId_200),

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_StartConversation",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/directline/conversations",
                    ContentType = "application/json",
                    Id = new Guid("39ef080e-9afd-c049-9d8d-207191f26ae1"),
                    Description = "Start a new conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_StartConversation),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_StartConversation_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_StartConversation_201)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_ReconnectToConversation",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/directline/conversations/{conversationId}",
                    ContentType = "application/json",
                    Id = new Guid("4cd95d40-7f23-5319-6e20-84e9a6bd077f"),
                    Description = "Get information about an existing conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_ReconnectToConversation),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_ReconnectToConversation_200),

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_GetActivities",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/directline/conversations/{conversationId}/activities",
                    ContentType = "application/json",
                    Id = new Guid("656a45bf-90e7-df68-7878-6f952f150446"),
                    Description = "Get activities in this conversation. This method is paged with the 'watermark' parameter.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_GetActivities),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_GetActivities_200),

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_PostActivity",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/directline/conversations/{conversationId}/activities",
                    ContentType = "application/json",
                    Id = new Guid("f2b61f47-47b9-2d34-43b4-48b5daa38680"),
                    Description = "Send an activity",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_PostActivity),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_PostActivity_200),

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_Upload",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/directline/conversations/{conversationId}/upload",
                    ContentType = "application/json",
                    Id = new Guid("3331d83b-fae6-b2fb-74c3-592f57c3fcd3"),
                    Description = "Upload file(s) and send as attachment(s)",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_Upload),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Conversations_Upload_200),

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Tokens",
                    OperationName = "Tokens_RefreshToken",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/directline/tokens/refresh",
                    ContentType = "application/json",
                    Id = new Guid("ce36cd60-214d-da60-a3dd-54bed51f5cd7"),
                    Description = "Refresh a token",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Tokens_RefreshToken),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Tokens_RefreshToken_200),

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Direct Line 3.0",
                    ServiceName = "Tokens",
                    OperationName = "Tokens_GenerateTokenForNewConversation",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/directline/tokens/generate",
                    ContentType = "application/json",
                    Id = new Guid("18308917-5a5a-83e1-5c00-3da3f24b2686"),
                    Description = "Generate a token for a new conversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Tokens_GenerateTokenForNewConversation),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Direct_Line_30.Tokens_GenerateTokenForNewConversation_200),

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Attachments",
                    OperationName = "Attachments_GetAttachmentInfo",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/attachments/{attachmentId}",
                    ContentType = "application/json",
                    Id = new Guid("fb46155b-29b1-4ad6-d332-03c6e91263a4"),
                    Description = "GetAttachmentInfo",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachmentInfo),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachmentInfo_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachmentInfo_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Attachments",
                    OperationName = "Attachments_GetAttachment",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/attachments/{attachmentId}/views/{viewId}",
                    ContentType = "application/json",
                    Id = new Guid("245c691e-d718-2e55-e606-471d0bfae5da"),
                    Description = "GetAttachment",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachment),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachment_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Attachments_GetAttachment_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_GetConversations",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations",
                    ContentType = "application/json",
                    Id = new Guid("ba90a0d0-ab17-bd8d-ae83-7f9f24aa03ce"),
                    Description = "GetConversations",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversations),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversations_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversations_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_CreateConversation",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations",
                    ContentType = "application/json",
                    Id = new Guid("80a81381-022d-11d7-8b33-f921353da1d1"),
                    Description = "CreateConversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_CreateConversation),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_CreateConversation_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_CreateConversation_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_CreateConversation_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_CreateConversation_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_SendToConversation",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations/{conversationId}/activities",
                    ContentType = "application/json",
                    Id = new Guid("b3097693-6c95-26cb-e437-9cf0b704c633"),
                    Description = "SendToConversation",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendToConversation),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendToConversation_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendToConversation_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendToConversation_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendToConversation_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_SendConversationHistory",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations/{conversationId}/activities/history",
                    ContentType = "application/json",
                    Id = new Guid("a298909c-dd88-2ecc-2238-d71724bc0aa3"),
                    Description = "SendConversationHistory",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendConversationHistory),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendConversationHistory_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendConversationHistory_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendConversationHistory_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_SendConversationHistory_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.PUT,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_UpdateActivity",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations/{conversationId}/activities/{activityId}",
                    ContentType = "application/json",
                    Id = new Guid("95fac394-3b3c-f01c-6eae-96b42899ed53"),
                    Description = "UpdateActivity",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UpdateActivity),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UpdateActivity_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UpdateActivity_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UpdateActivity_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UpdateActivity_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_ReplyToActivity",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations/{conversationId}/activities/{activityId}",
                    ContentType = "application/json",
                    Id = new Guid("24f21b0a-4914-33f8-dcae-81a0032c093d"),
                    Description = "ReplyToActivity",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_ReplyToActivity),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_ReplyToActivity_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_ReplyToActivity_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_ReplyToActivity_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_ReplyToActivity_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.DELETE,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_DeleteActivity",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations/{conversationId}/activities/{activityId}",
                    ContentType = "application/json",
                    Id = new Guid("87534e85-4dbc-6e3e-8439-d8a7f78d5ea8"),
                    Description = "DeleteActivity",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_DeleteActivity),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_DeleteActivity_default),

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_GetConversationMembers",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations/{conversationId}/members",
                    ContentType = "application/json",
                    Id = new Guid("4d9d8e66-ec2d-896f-8d10-975b2fe11a78"),
                    Description = "GetConversationMembers",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversationMembers),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversationMembers_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversationMembers_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_GetConversationPagedMembers",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations/{conversationId}/pagedmembers",
                    ContentType = "application/json",
                    Id = new Guid("b61a1bac-0b8f-f1cb-1a4d-871248a72d25"),
                    Description = "GetConversationPagedMembers",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversationPagedMembers),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetConversationPagedMembers_200),

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.DELETE,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_DeleteConversationMember",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations/{conversationId}/members/{memberId}",
                    ContentType = "application/json",
                    Id = new Guid("3c3a73d4-eb12-090c-9aa4-4d46875c40c9"),
                    Description = "DeleteConversationMember",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_DeleteConversationMember),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_DeleteConversationMember_default),

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_GetActivityMembers",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations/{conversationId}/activities/{activityId}/members",
                    ContentType = "application/json",
                    Id = new Guid("8bde7e15-975b-963d-6892-758f0b621167"),
                    Description = "GetActivityMembers",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetActivityMembers),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetActivityMembers_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_GetActivityMembers_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "Bot Framework",
                    ServiceCategory = "Channel",
                    ServiceName = "Conversations",
                    OperationName = "Conversations_UploadAttachment",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/v3/conversations/{conversationId}/attachments",
                    ContentType = "application/json",
                    Id = new Guid("52e36bbf-27dc-9b2e-8dba-2841af8a6b39"),
                    Description = "UploadAttachment",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UploadAttachment),
                    ResponseType = typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UploadAttachment_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UploadAttachment_201), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UploadAttachment_202), typeof(Hummingbird.MS.Bot.Bot_Framework.Channel.Conversations_UploadAttachment_default)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Alterations",
                    OperationName = "Download_Alterations",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/alterations",
                    ContentType = "application/json",
                    Id = new Guid("ea524c14-3e05-8b1c-228b-5239bc72a17c"),
                    Description = "Download alterations from runtime.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Alterations_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.PUT,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Alterations",
                    OperationName = "Replace_Alterations",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/alterations",
                    ContentType = "application/json",
                    Id = new Guid("19d2cdc6-8efd-fd44-7dd8-7435d9e243d2"),
                    Description = "Replace alterations data.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations_400),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Alterations_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "EndpointKeys",
                    OperationName = "Get_Endpoint_Keys",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/endpointkeys",
                    ContentType = "application/json",
                    Id = new Guid("37859da7-9111-7003-4cc8-56fa18aa84e3"),
                    Description = "Gets endpoint keys for an endpoint",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Endpoint_Keys_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.PATCH,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "EndpointKeys",
                    OperationName = "Refresh_Endpoint_Keys",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/endpointkeys/{keyType}",
                    ContentType = "application/json",
                    Id = new Guid("3709145d-64cb-49a2-c4e8-fc9be7251b13"),
                    Description = "Re-generates an endpoint key.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Refresh_Endpoint_Keys_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    OperationName = "Get_Knowledgebases_for_user",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/knowledgebases",
                    ContentType = "application/json",
                    Id = new Guid("bfedf999-f3d9-982d-0f17-53d9e885b120"),
                    Description = "Gets all knowledgebases for a user.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebases_for_user_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    OperationName = "Get_Knowledgebase_Details",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/knowledgebases/{kbId}",
                    ContentType = "application/json",
                    Id = new Guid("2defc19a-6be0-d698-4ffd-6308552cd7b4"),
                    Description = "Gets details of a specific knowledgebase.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Knowledgebase_Details_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.DELETE,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    OperationName = "Delete_Knowledgebase",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/knowledgebases/{kbId}",
                    ContentType = "application/json",
                    Id = new Guid("a756aea9-d9a3-2226-cbc9-91d626c9c9ef"),
                    Description = "Deletes the knowledgebase and all its data.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase_400),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Delete_Knowledgebase_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    OperationName = "Publish_Knowledgebase",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/knowledgebases/{kbId}",
                    ContentType = "application/json",
                    Id = new Guid("146e9899-0c0b-7e45-4304-b99c026e43bd"),
                    Description = "Publishes all changes in test index of a knowledgebase to its prod index.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase_400),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Publish_Knowledgebase_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.PUT,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    OperationName = "Replace_Knowledgebase",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/knowledgebases/{kbId}",
                    ContentType = "application/json",
                    Id = new Guid("6d402519-cd17-52c7-8a77-f72caa5c7548"),
                    Description = "Replace knowledgebase contents.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase_400),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Replace_Knowledgebase_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.PATCH,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    OperationName = "Update_Knowledgebase",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/knowledgebases/{kbId}",
                    ContentType = "application/json",
                    Id = new Guid("235e2f1a-b0ce-949d-7114-5561c4c46155"),
                    Description = "Asynchronous operation to modify a knowledgebase.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_202),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Update_Knowledgebase_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.POST,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    OperationName = "Create_Knowledgebase",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/knowledgebases/createasync",
                    ContentType = "application/json",
                    Id = new Guid("70db643e-a5df-18fd-5e2b-2435ba208f16"),
                    Description = "Asynchronous operation to create a new knowledgebase.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_202),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Create_Knowledgebase_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Knowledgebases",
                    OperationName = "Download_Knowledgebase",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/knowledgebases/{kbId}/{environment}/qna",
                    ContentType = "application/json",
                    Id = new Guid("27ec38c6-6fc1-0bca-91e6-2b0378f43949"),
                    Description = "Download the knowledgebase.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Download_Knowledgebase_500)},

                },

                new HttpResponseMetadata(){
                    HttpMethod = HttpMethod.GET,
                    ApplicationName = "QnAMaker",
                    ServiceCategory = "QnaMaker",
                    ServiceName = "Operations",
                    OperationName = "Get_Operation_Details",
                    BodySerializer = Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(typeof(Hummingbird.TestFramework.Serialization.JsonSerializer)),
                    UriTemplate = "/operations/{operationId}",
                    ContentType = "application/json",
                    Id = new Guid("e50ce073-5928-12a3-ead0-5fa4dd303899"),
                    Description = "Gets details of a specific long running operation.",
                    HttpVersion = Hummingbird.TestFramework.Services.HttpVersion.Version11,
                    RequestType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details),
                    ResponseType = typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_200),
					ErrorTypes = new Type[] {typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_400), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_401), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_403), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_404), typeof(Hummingbird.MS.Bot.QnAMaker.QnaMaker.Get_Operation_Details_500)},

                },
				};
			}
		}
			
        public override Parameter[] ServerParameters
        {
            get
            {
                return new Parameter[0];
            }
        }

        public override Parameter[] ClientParameters
        {
            get
            {
                return new Parameter[0];
            }
        }

	}
}
